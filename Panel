bl_info = {
    "name": "Plantilla base blender",
    "author": "Venti y Pablo",
    "version": (1, 0),
    "blender": (3, 2, 2),
    "location": "Render",
    "description": "Programa para cambiar los nombres de los objetos seleccionados de la escena. Permite buscar y remplazar una cadena de texto contenida en el nombre y/o añadir un prefijo/sufijo",
    "warning": "",
    "doc_url": "",
    "category": "Edit names",
}

import bpy
import mathutils
from bpy.props import (StringProperty,PointerProperty,
                       )
                       
from bpy.types import (Panel,
                       PropertyGroup,
                       )

#--------------------------------------------------------FUNCIONES-------------------------------------------------------------

def main(context):
   bpy.ops.mesh.primitive_cube_add(enter_editmode=False, align='WORLD', location=(1, -1, 6), scale=(1, 1, 1))
   
def circulo(context):
    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, enter_editmode=False, align='WORLD', location=(1, -1, 6), scale=(1, 1, 1))
    

#--------------------------------------------------------INTERFAZ GRÁFICA------------------------------------------------------

class OperadorPrefijo(bpy.types.Operator):
    """Tooltip"""
    bl_idname = "object.operator_prefijo"
    bl_label = "Añadir prefijo"

    def execute(self, context):
        main(context)
        return {'FINISHED'}
    
class OperadorSufijo(bpy.types.Operator):
    """Tooltip"""
    bl_idname = "object.operator_sufijo"
    bl_label = "Añadir sufijo"

    def execute(self, context):
        circulo(context)
        return {'FINISHED'}
    
class OperadorBuscarRemplazar(bpy.types.Operator):
    """Tooltip"""
    bl_idname = "object.operator_remplazar"
    bl_label = "Buscar y Remplazar"

    def execute(self, context):
        circulo(context)
        return {'FINISHED'}
    
class OperadorRenombrar(bpy.types.Operator):
    """Tooltip"""
    bl_idname = "object.operator_renombrar"
    bl_label = "Renombrar"

    def execute(self, context):
        circulo(context)
        return {'FINISHED'}

def menu_func(self, context):
    self.layout.operator(OperadorPrefijo.bl_idname, text=OperadorPrefijo.bl_label)
    self.layout.operator(OperadorSufijo.bl_idname, text=OperadorSufijo.bl_label)
    self.layout.operator(OperadorBuscarRemplazar.bl_idname, text=OperadorBuscarRemplazar.bl_label)
    self.layout.operator(OperadorRenombrar.bl_idname, text=OperadorRenombrar.bl_label)

# Register and add to the "object" menu (required to also use F3 search "Simple Object Operator" for quick access)
def register():
    bpy.utils.register_class(OperadorPrefijo)
    bpy.utils.register_class(OperadorSufijo)
    bpy.utils.register_class(OperadorBuscarRemplazar)
    bpy.utils.register_class(OperadorRenombrar)
    bpy.types.VIEW3D_MT_object.append(menu_func)
    
    bpy.types.Scene.Prefijo = bpy.props.StringProperty(
        name="prefijo",
        description=":",
        default="",
        maxlen=1024,
        )

    bpy.types.Scene.Sufijo = bpy.props.StringProperty(
        name="sufijo",
        description=":",
        default="",
        maxlen=1024,
        )
        
    bpy.types.Scene.Buscar = bpy.props.StringProperty(
        name="buscar",
        description=":",
        default="",
        maxlen=1024,
        )
        
    bpy.types.Scene.Remplazar = bpy.props.StringProperty(
        name="remplazar",
        description=":",
        default="",
        maxlen=1024,
        )
        
    bpy.types.Scene.Renombrar = bpy.props.StringProperty(
        name="renombrar",
        description=":",
        default="",
        maxlen=1024,
        )

def unregister():
    bpy.utils.unregister_class(OperadorPrefijo)
    bpy.utils.unregister_class(OperadorSufijo)
    bpy.utils.unregister_class(OperadorBuscarRemplazar)
    bpy.utils.unregister_class(OperadorRenombrar)
    bpy.types.VIEW3D_MT_object.remove(menu_func)
    del bpy.types.Scene.Prefijo
    del bpy.types.Scene.Sufijo
    del bpy.types.Scene.Buscar
    del bpy.types.Scene.Remplazar
    del bpy.types.Scene.Renombrar


if __name__ == "__main__":
    register()

    # test call xd
    #bpy.ops.object.simple_operator()

#interfaz grafica 


class LayoutDemoPanel(bpy.types.Panel):
    """Creates a Panel in the scene context of the properties editor"""
    bl_label = "Base para addons"
    bl_idname = "SCENE_PT_layout"
    bl_space_type = 'PROPERTIES'
    bl_region_type = 'WINDOW'
    bl_context = "scene"

    def draw(self, context):
        layout = self.layout

        scene = context.scene

       
       
        #Botones de tamaño normal
        layout.label(text="Añadir un prefijo a los objetos seleccionados")
        row = layout.row()
        row.prop(scene, 'Prefijo')
        row = layout.row()
        row.scale_y = 1.0
        row.operator("object.operator_prefijo")
        
        layout.label(text="Añadir un sufijo a los objetos seleccionados")
        row = layout.row()
        row.prop(scene, 'Sufijo')
        row = layout.row()
        row.scale_y = 1.0
        row.operator("object.operator_sufijo")
        
        layout.label(text="Busca una cadena de texto en los nombres de los objetos seleccionados y la remplaza por otra")
        row = layout.row()
        row.prop(scene, 'Buscar')
        row = layout.row()
        row.prop(scene, 'Remplazar')
        row = layout.row()
        row.scale_y = 1.0
        row.operator("object.operator_remplazar")
        
        layout.label(text="Renombra todos los objetos seleccionados")
        row = layout.row()
        row.prop(scene, 'Renombrar')
        row = layout.row()
        row.scale_y = 1.0
        row.operator("object.operator_renombrar")


def register():
    bpy.utils.register_class(LayoutDemoPanel)


def unregister():
    bpy.utils.unregister_class(LayoutDemoPanel)


if __name__ == "__main__":
    register()